date_has_passed <- function(date) {
current_day <- as.Date("2020-01-22")
date_diff <- current_day - date
final_date <- date_diff[this_day < date]
}
deadline<- as.Date("2020-01-23")
date_has_passed(deadline)
date_has_passed <- function(date) {
current_day <- as.Date("2020-01-22")
date_diff <- current_day - date
final_date <- date_diff[current_day < date]
}
date_has_passed(deadline)
print(date_has_passed)
date_has_passed <- function(date) {
current_day <- as.Date("2020-01-22")
date_diff <- current_day - as.Date(date)
final_date <- date_diff[current_day < date]
}
date_has_passed(deadline)
print(date_has_passed)
date_has_passed <- function(date) {
current_day <- as.Date("2020-01-22")
date_diff <- current_day - as.Date(date)
final_date <- date_diff[current_day < date]
}
date_has_passed("2020-01-23")
View(date_has_passed)
View(change_year)
date_has_passed <- function(date) {
date_argument <- as.Date(date)
current_day <- as.Date("2020-01-22")
date_diff <- current_day - date_argument
final_date <- date_diff[date_diff > 0]
}
date_has_passed("2020-01-23")
date_has_passed <- function(date) {
date_argument <- as.Date(date)
current_day <- as.Date("2020-01-22")
date_diff <- current_day - date_argument
final_date <- date_diff[date_diff > 0]
return(final_date)
}
date_has_passed("2020-01-23")
date_has_passed <- function(date) {
date_argument <- as.Date(date)
current_day <- as.Date("2020-01-22")
date_diff <- current_day - date_argument
final_date <- date_diff > 0
return(final_date)
}
date_has_passed("2020-01-23")
print(date_has_passed)
deadline <- as.Date("2020-01-23")
date_has_passed(deadline) #Returns FALSE
print(birthdays)
?change_year
??change_year
get_next_birthday<- function(date) {
birthday <- as.Date(date)
add_year <- change_year(2020, date)
passed <- date_has_passed(add_year)
next_bday <- if(passed) {
change_year(2021, date)
}
return(next_bday)
}
get_next_birthday(birthdays$me)
get_next_birthday(birthdays$kyle)
next_birthdays <- lapply(birthdays, get_next_birthday)
print(next_birthdays)
get_next_birthday<- function(date) {
birthday <- as.Date(date)
add_year <- change_year(date, 2020)
passed <- date_has_passed(add_year)
next_bday <- if(passed) {
change_year(date, 2020)
}
get_next_birthday<- function(date) {
birthday <- as.Date(date)
add_year <- change_year(date, 2020)
passed <- date_has_passed(add_year)
next_bday <- if(passed) {
change_year(date, 2020)
}
return(next_bday)
}
]
get_next_birthday<- function(date) {
birthday <- as.Date(date)
add_year <- change_year(date, 2020)
passed <- date_has_passed(add_year)
next_bday <- if(passed) {
change_year(date, 2020)
}
return(next_bday)
}
get_next_birthday(birthdays$kyle)
next_birthdays <- lapply(birthdays, get_next_birthday)
print(next_birthdays)
get_next_birthday<- function(date) {
add_year <- change_year(date, 2020)
passed <- date_has_passed(add_year)
next_bday <- if(passed) {
change_year(date, 2020)
}
get_next_birthday(birthdays$me)
]
get_next_birthday<- function(date) {
add_year <- change_year(date, 2020)
passed <- date_has_passed(add_year)
next_bday <- if(passed) {
change_year(date, 2020)
}
return(next_bday)
}
get_next_birthday(birthdays$me)
get_next_birthday<- function(date) {
add_year <- change_year(date, 2020)
passed <- date_has_passed(add_year)
next_bday <- if(passed) {
change_year(date, 2021)
} else{add_year}
return(next_bday)
}
get_next_birthday(birthdays$me)
source('~/Desktop/INFO_assignments/a2-core-skills-sarahburke02/assignment.R')
my_age<- 19
my_name<- "Sarah Burke"
#Makes an introduction sentence that pastes together a name and age of a person.
make_introduction<- function(name, age){
paste("Hello, my name is", name, "and I'm", age, "years old.")
}
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
casual_intro<- sub("Hello, my name is", "Hi, I'm", my_intro)
print(casual_intro)
capital_intro <- str_to_title(my_intro)
print(capital_intro)
intro_e_count<- str_count(my_intro, "e")
print(intro_e_count)
#################
#### PART 2 #####
#################
books <- c("The Lightning Theif", "Dorothy Must Die",
"A Wrinkle in Time", "A Little Princess",
"Secret Garden", "Harry Potter")
print(books)
top_three_books <- books[1:3]
print(top_three_books)
#4 Help
#A function that removes a book title from the books vector that corresponds with the given index
remove_book <- function(book_titles, index) {
book_titles <- book_titles[-5]
return(book_titles)
}
books_without_five <- remove_book(books,5)
print(books_without_five)
long_titles <- books[nchar(books) > 15]
print(long_titles)
#################
#### PART 3 #####
#################
numbers<-c(1:201)
squared_numbers <- numbers * numbers
squared_mean <- mean(squared_numbers)
print(squared_mean)  #prints 13567.67
squared_median <- median(squared_numbers)
print(squared_median)
#Create a variable that holds the values of the square roots of all the numbers in the "numbers" vector.
#Then create a filter that only returns the values in the vector that are integers
num_squared <- sqrt(numbers)
perfect_squares <-numbers[num_squared==as.integer(num_squared)]
print(perfect_squares)
#################
#### PART 4 #####
#################
start_of_break <-"2020-03-21"
spring_break <-as.Date(start_of_break, origin = "1970-01-01")
print(spring_break)
class(spring_break)
today <- as.Date("2020-01-22")
print(today)
class(today)
days_to_break <- spring_break - today
print(days_to_break) #prints time difference of 59 days
#Function that takes arguments of a date and year
#Then converts the date value into a character string which can be used to create a substring of just the month and day parts of the date, in other words, the last 5-10 characters
#Paste the substing to the end of the year argument and create a new string
#Convert the string into a date type file and return it.
change_year<- function(date, year) {
date_as_string<- as.character(date)
month_and_day<-substr(date_as_string, 5, 10)
new_date<- paste0(year, month_and_day)
final_date<- as.Date(new_date)
return(final_date)
}
spring_break_2025<- change_year(spring_break, 2025)
print(spring_break_2025)
class(spring_break_2025)
#Function that takes a date as a string and converts it to a date data type
#it then creates a current date value as a date and subtracts the date argument from the current date
#If the date difference is greater than 0, the function will return a TRUE or FALSE to indicate if the date has indeed passed
date_has_passed <- function(date) {
date_argument <- as.Date(date)
current_day <- as.Date("2020-01-22")
date_diff <- current_day - date_argument
final_date <- date_diff > 0
return(final_date)
}
deadline <- as.Date("2020-01-23")
date_has_passed(deadline) #Returns FALSE
birthdays <- list(me = as.Date("2000-02-02"),
kyle = as.Date("1997-12-10"),
mom = as.Date("1970-12-25"),
dad = as.Date("1969-12-09"))
print(birthdays)
#Function that changes the year of a birthday to 2020 and passes the new date into a function that returns whether or not it has passed
#if it is TRUE that the date has passed, then a year is added, making it return a day in 2021
#if the date has not passed,it will keep the year 2020. Either way will return a person's NEXT birthday.
get_next_birthday<- function(date) {
add_year <- change_year(date, 2020)
passed <- date_has_passed(add_year)
next_bday <- if(passed) {
change_year(date, 2021)
} else{add_year}
return(next_bday)
}
get_next_birthday(birthdays$me)
next_birthdays <- lapply(birthdays, get_next_birthday)
print(next_birthdays)
library.stringr
#################
#### PART 1 #####
#################
run(stringr)
#################
#### PART 1 #####
#################
stringr
#################
#### PART 1 #####
#################
?stringr
install.packages("stringr")
install.packages("stringr")
#Introductions
#I have already installed the stringr package during class.
my_age<- 19
my_name<- "Sarah Burke"
#Makes an introduction sentence that pastes together a name and age of a person.
make_introduction<- function(name, age){
paste("Hello, my name is", name, "and I'm", age, "years old.")
}
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
casual_intro<- sub("Hello, my name is", "Hi, I'm", my_intro)
print(casual_intro)
capital_intro <- str_to_title(my_intro)
print(capital_intro)
intro_e_count<- str_count(my_intro, "e")
print(intro_e_count)
#################
#### PART 2 #####
#################
books <- c("The Lightning Theif", "Dorothy Must Die",
"A Wrinkle in Time", "A Little Princess",
"Secret Garden", "Harry Potter")
print(books)
top_three_books <- books[1:3]
print(top_three_books)
#4 Help
#A function that removes a book title from the books vector that corresponds with the given index
remove_book <- function(book_titles, index) {
book_titles <- book_titles[-5]
return(book_titles)
}
books_without_five <- remove_book(books,5)
print(books_without_five)
long_titles <- books[nchar(books) > 15]
print(long_titles)
#################
#### PART 3 #####
#################
numbers<-c(1:201)
squared_numbers <- numbers * numbers
squared_mean <- mean(squared_numbers)
print(squared_mean)  #prints 13567.67
squared_median <- median(squared_numbers)
print(squared_median)
#Create a variable that holds the values of the square roots of all the numbers in the "numbers" vector.
#Then create a filter that only returns the values in the vector that are integers
num_squared <- sqrt(numbers)
perfect_squares <-numbers[num_squared==as.integer(num_squared)]
print(perfect_squares)
#################
#### PART 4 #####
#################
start_of_break <-"2020-03-21"
spring_break <-as.Date(start_of_break, origin = "1970-01-01")
print(spring_break)
class(spring_break)
today <- as.Date("2020-01-22")
print(today)
class(today)
days_to_break <- spring_break - today
print(days_to_break) #prints time difference of 59 days
#Function that takes arguments of a date and year
#Then converts the date value into a character string which can be used to create a substring of just the month and day parts of the date, in other words, the last 5-10 characters
#Paste the substing to the end of the year argument and create a new string
#Convert the string into a date type file and return it.
change_year<- function(date, year) {
date_as_string<- as.character(date)
month_and_day<-substr(date_as_string, 5, 10)
new_date<- paste0(year, month_and_day)
final_date<- as.Date(new_date)
return(final_date)
}
spring_break_2025<- change_year(spring_break, 2025)
print(spring_break_2025)
class(spring_break_2025)
#Function that takes a date as a string and converts it to a date data type
#it then creates a current date value as a date and subtracts the date argument from the current date
#If the date difference is greater than 0, the function will return a TRUE or FALSE to indicate if the date has indeed passed
date_has_passed <- function(date) {
date_argument <- as.Date(date)
current_day <- as.Date("2020-01-22")
date_diff <- current_day - date_argument
final_date <- date_diff > 0
return(final_date)
}
deadline <- as.Date("2020-01-23")
date_has_passed(deadline) #Returns FALSE
birthdays <- list(me = as.Date("2000-02-02"),
kyle = as.Date("1997-12-10"),
mom = as.Date("1970-12-25"),
dad = as.Date("1969-12-09"))
print(birthdays)
#Function that changes the year of a birthday to 2020 and passes the new date into a function that returns whether or not it has passed
#if it is TRUE that the date has passed, then a year is added, making it return a day in 2021
#if the date has not passed,it will keep the year 2020. Either way will return a person's NEXT birthday.
get_next_birthday<- function(date) {
add_year <- change_year(date, 2020)
passed <- date_has_passed(add_year)
next_bday <- if(passed) {
change_year(date, 2021)
} else{add_year}
return(next_bday)
}
get_next_birthday(birthdays$me)
next_birthdays <- lapply(birthdays, get_next_birthday)
print(next_birthdays)
capital_intro <- str_to_title(my_intro)
get_next_birthday<- function(date) {
add_year <- change_year(date, 2020)
passed <- date_has_passed(add_year)
next_bday <- if(passed) {
change_year(date, 2021)
} else{add_year}
return(next_bday)
}
get_next_birthday(birthdays$me)
date_has_passed <- function(date) {
date_argument <- as.Date(date)
current_day <- as.Date("2020-01-22")
date_diff <- current_day - date_argument
final_date <- date_diff > 0
return(final_date)
}
deadline <- as.Date("2020-01-23")
date_has_passed(deadline) #Returns FALSE
date_has_passed("2020-03-17")
deadline <- as.Date("2020-01-16")
date_has_passed(deadline) #Returns FALSE
deadline <- as.Date("2010-01-16")
date_has_passed(deadline) #Returns FALSE
deadline <- as.Date("2030-01-16")
date_has_passed(deadline) #Returns FALSE
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
print(employees)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 4000, 5000)
adjustments <- runif(100, -5000, 10000)
salaries_2017 <- runif(100, 40000, 50000)
salaries <- data.frame(emplyees, salaries_2017, adjustments)
employees <- paste("Employee", 1:100)
print(employees)
salaries_2017 <- runif(100, 40000, 50000)
salaries <- data.frame(emplyees, salaries_2017, adjustments)
salaries <- data.frame(employees, salaries_2017, adjustments)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
print(salaries)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries_2017 + adjustments
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$raise <- salaries_2018 > salaries_2017
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries_2017 + adjustments
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$raise <- salaries_2018 > salaries_2017
print(salaries)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$raise <- salaries_2018 > salaries_2017
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$raise <- salaries$salaries_2018 > salaries$salaries_2017
print(salaries)
# What was the 2018 salary of Employee 57
salaries[57, salaries_2018]
# What was the 2018 salary of Employee 57
salaries[57, "salaries_2018"]
salaries$salaries_2018 <- salaries$salaries_2017 + salaries$adjustments
# How many employees got a raise?
salaries[,raise == TRUE]
# How many employees got a raise?
salaries[,"raise" == TRUE]
# What was the 2018 salary of Employee 57
print(salaries[salaries$employees == "Employee 57", "salaries_2018"])
# How many employees got a raise?
nrow(salaries[salaries$raise == TRUE])
# How many employees got a raise?
nrow(salaries[salaries$raise == TRUE,])
# What was the dollar value of the highest raise?
salaries$adjustments
# What was the dollar value of the highest raise?
max(salaries$adjustments)
salaries[ salaries$adjustments == biggest_raise]
salaries[salaries$adjustments == biggest_raise]
salaries[salaries$adjustments == biggest_raise, ]
# What was the dollar value of the highest raise?
biggest_raise <- max(salaries$adjustments)
salaries[salaries$adjustments == biggest_raise, ]
#or
salaries 9 salaries$adjustments == max(salaries$adjustments), "adjustments"]
#or
salaries[salaries$adjustments == max(salaries$adjustments), "adjustments"]
salaries <- data.frame(employees, salaries_2017, adjustments, stringsAsFactors = FALSE)
# What was the "name" of the employee who received the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "employees"]
# For people who did not get a raise, how much money did they lose on average?
salaries[salaries$raise == FALSE,]
# For people who did not get a raise, how much money did they lose on average?
salaries[salaries$raise == FALSE, ]
# For people who did not get a raise, how much money did they lose on average?
paycut <- salaries[salaries$raise == FALSE, ]
mean(paycut)
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
print(employees)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments, stringsAsFactors = FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries$salaries_2017 + salaries$adjustments
print(salaries)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$raise <- salaries$salaries_2018 > salaries$salaries_2017
print(salaries)
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of Employee 57
print(salaries[salaries$employees == "Employee 57", "salaries_2018"])
# How many employees got a raise?
nrow(salaries[salaries$raise == TRUE,])
# What was the dollar value of the highest raise?
biggest_raise <- max(salaries$adjustments)
salaries[salaries$adjustments == biggest_raise, ]
#or
salaries[salaries$adjustments == max(salaries$adjustments), "adjustments"] #Long and repetitive and that's ok!!
# What was the "name" of the employee who received the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "employees"]
# What was the largest decrease in salaries between the two years?
# What was the name of the employee who recieved largest decrease in salary?
# What was the average salary change?
# For people who did not get a raise, how much money did they lose on average?
paycut <- salaries[salaries$raise == FALSE, ]
mean(paycut)
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
# For people who did not get a raise, how much money did they lose on average?
paycut <- salaries[salaries$raise == FALSE, ]
mean(paycut)
mean(salaries[salaries$got_raise == FALSE, "adjustments"])
# For people who did not get a raise, how much money did they lose on average?
print( salaries[salaries$raise == FALSE, ] )
mean(salaries[salaries$got_raise == FALSE, "adjustments"])
mean(salaries[salaries$raise == FALSE, "adjustments"])
setwd("~/Desktop/book-exercises/chapter-10-exercises/exercise-2")
getwd()
